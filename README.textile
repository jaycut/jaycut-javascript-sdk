h2. Usage

The below is a simple case of implementing the editor.

<pre><code>
<html>
<head>
	<title>Our video editor</title>
</head>
<body>          
<!-- This is where the editor will be inserted, you can place it anywhere you need it.  -->
<div id="jaycut-editor"></div>

<!-- Include the SDK, just before the closing </body> tag.-->

<script src="http://api.jaycut.com/assets/javascripts/sdk.0.3.js" type="text/javascript"></script> 
<script type="text/javascript">

var uri_authority = "cutedogsite.api.jaycut.com";
// uri_authority will be in the format YOURSITENAMEHERE.api.jaycut.com. 
// Site name is something you manually picked when signing up for API access, you
// can find it in your welcome email along with your API secret. 
// If you are using CNAME aliasing, you can put your domain alias here.i

var login_uri = 'YOUR-LOGIN-URL-HERE';
// login_uri is an url that you have to generate server side. There
// are plenty of tutorials on the developer section of Jaycut.com on
// how to generate a login_uri using your server side language of choice.

JC.init(uri_authority, login_uri );
</script>
</body>
</html>     

</code></pre>

h3. Events

The editor triggers various events, that you can listen to via the JavaScript SDK. 

<pre><code>
<html>
<head>
	<title>Our video editor</title>
</head>                                                        
<body>

<div id="jaycut-editor"></div>



<script src="http://api.jaycut.com/assets/javascripts/sdk.0.3.js" type="text/javascript"></script> 
<script type="text/javascript">
JC.subscribe('load_completed', function() {

	// event: load_completed
	// Fired when the editor itself has loaded (does not include media clips)
	// event data: none
	alert("Wow, the editor has loaded!"); 

});

JC.subscribe('mix_export_requested', function(data) {
	
	// event: mix_export_created
	// Fired when a user has created an export (i.e. clicked the publish/export button
	// and went through the publish tutorial)         authority
	// event_data: export_id 
	alert("An export has been created, and it has ID " + data.export_id);                                

});


var authority = "mydogvideosite.api.jaycut.com"; 
var login_uri = 'YOUR-LOGIN-URL-HERE'; // Login URI is generated server side.
JC.init(authority, login_uri );
</script>
</body>
</html>

</code></pre>


h3. SWFObject from your own domain

You might have noticed that the JavaScript SDK includes SWFObject from ajax.googleapis.com, 
and you might prefer to host swfobject from your own domain (because it reduces DNS lookups,
or just because it looks nice). To do this, simply host and load Swfobject yourself before you
load the JayCut Javascript SDK - if the SDK find that SWFobject is already loaded, it will use that,
and will not load the SWFObject from Google.
