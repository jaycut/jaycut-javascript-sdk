h1. JayCut Mixer Javascript SDK

This is the JavaScript SDK for including the JayCut Mixer on your web site. It is official, but it has not been in the wild for long - keep the feedback coming, please!

h2. Usage

The below is a simple case of implementing the editor.

<pre><code>
<html>
<head>
	<title>Our video editor</title>
</head>
<body>          
<!-- This is where the editor will be inserted, you can place it anywhere you need it.  -->
<div id="jaycut-editor"></div>

<!-- Include the SDK, just before the closing </body> tag.-->

<script src="http://api.jaycut.com/assets/javascripts/sdk.0.4.1.js" type="text/javascript"></script> 
<script type="text/javascript">

var uri_authority = "cutedogsite.api.jaycut.com";
// uri_authority will be in the format YOURSITENAMEHERE.api.jaycut.com. 
// Site name is something you manually picked when signing up for API access, you
// can find it in your welcome email along with your API secret. 
// If you are using CNAME aliasing, you can put your domain alias here.

var login_uri = 'YOUR-LOGIN-URL-HERE';
// login_uri is an url that you have to generate server side. There
// are plenty of tutorials on the developer section of Jaycut.com on
// how to generate a login_uri using your server side language of choice.


// The options hash can contain more but this is the bare minimum
var options = {
  'uri_authority': uri_authority,
  'login_uri': login_uri
}

JC.init(options)


</script>
</body>
</html>     

</code></pre>

In versions prior to 0.4.1, the JC.init did not take an options hash,
but only the uri_authority and the login_uri:

<pre><code>
JC.init(uri_authority, login_uri );
</code></pre>

h3. Options

Since version 0.4.1 the JC.init call takes a hash as only
argument. This hash may contain additional configuration data aside
from the mandatory uri_authority and login_uri.

* @version@ - Set which version of the loaded applet to use. Default: 2
* @applet@ - Which applet to load. Default 'login'
* @chain@ - Which applet to chain load. Default 'mixer'
* @embed_target@ - Id of the html tag that will be replaced with the embedded object. Default 'jaycut-editor'
* @embed_width@ - Width of the embedded flash object. Either absolute (e.g '800px') or relative ( e.g '100%'). Default '100%'
* @embed_height@ - Height of the embedded flash object.
* @chain_params@ - Parameters to the chain-loaded applet as a hash. Default '{}'
* @flash_params@ - Flash embedding parameters
** @wmode@ - Default 'window'
** @allowScriptAccess@ - Default 'always'
** @allowFullScreen@ - Default 'true'
** @bgcolor@ - Default '#000000'

Also, all the options configurable as flashVars according to the
reference documentation are available as options. The flashVars are in
camelCase format in this context they may also be written using
underscores, like the other options. Valid options include among
others:

* @noMicrophone@
* @no_webcam@
* @no_upload@
* @locale@

Here's an example of a more customized embedding of the editor

<pre><code>
<html>
<head><title>Our video editor</title></head>
<body>          
<!-- This is where the editor will be inserted, you can place it anywhere you need it.  -->
<div id="editor-goes-here"></div>

<!-- Include the SDK, just before the closing </body> tag.-->

<script src="http://api.jaycut.com/assets/javascripts/sdk.0.4.1.js" type="text/javascript"></script> 
<script type="text/javascript">

var options = {
  'uri_authority': "cutedogsite.api.jaycut.com",
  'login_uri': 'YOUR-LOGIN-URL-HERE',
  'version': 2,
  'no_microphone': true,
  'no_webcam': true,
  'embed_target': 'editor-goes-here',
  'chain_params': {
     'feeds': [ 'shared_videos', 'shared_images' ],
     'filter': { 'shared_videos': { 'category_id': '5' } }
  },
  'flashparams': {
     'bgcolor': '#ffffff',
     'wmode': 'transparent'
  }
}

JC.init(options)

</script>
</body>
</html>     

</code></pre>


h3. Events

The editor triggers various events, that you can listen to via the JavaScript SDK. 

<pre><code>
<html>
<head>
	<title>Our video editor</title>
</head>                                                        
<body>

<div id="jaycut-editor"></div>



<script src="http://api.jaycut.com/assets/javascripts/sdk.0.3.1.js" type="text/javascript"></script> 
<script type="text/javascript">
JC.subscribe('load_completed', function() {

	// event: load_completed
	// Fired when the editor itself has loaded (does not include media clips)
	// event data: none
	alert("Wow, the editor has loaded!"); 

});

JC.subscribe('mix_export_requested', function(data) {
	
	// event: mix_export_requested
	// Fired when a user has requested an export (i.e. clicked the publish/export button)
	// event_data: mix_id 
	alert("An export has been requested of Mix with ID " + data.mix_id);                                
});

JC.subscribe('mix_export_created', function(data) {
	
	// event: mix_export_created
	// Fired when a user has created an export (i.e. completed the youtube exporter wizard, for instance)
	// event_data: export_id 
        // NOTE: export_id is the ID of the export object, NOT the mix. Also note that
        // that the export has been created, not necessarily finished rendering. Also, keep in
        // mind that the mixer does other things after this event (such as publishing) 
        // so you should be careful when using mix_export_created as a cue to navigate away from the mixer.
        // Consider using mix_published instead.
	alert("An export has been created, and it has ID " + data.export_id);                                
});

JC.subscribe('mix_published', function(data) {
	
	// event: mix_published
	// This is fired right after mix_export_created. 
	// event_data: mix_id 
        // NOTE: The mix has only been published, not necessarily finished rendering.
	alert("An export has been created, and it has ID " + data.mix_id);                                
});



var authority = "mydogvideosite.api.jaycut.com"; 
var login_uri = 'YOUR-LOGIN-URL-HERE'; // Login URI is generated server side.
JC.init(authority, login_uri );
</script>
</body>
</html>

</code></pre>


h3. SWFObject from your own domain

You might have noticed that the JavaScript SDK includes SWFObject from ajax.googleapis.com, 
and you might prefer to host swfobject from your own domain (because it reduces DNS lookups,
or just because it looks nice). To do this, simply host and load Swfobject yourself before you
load the JayCut Javascript SDK - if the SDK find that SWFobject is already loaded, it will use that,
and will not load the SWFObject from Google.
