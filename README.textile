h1. JayCut Mixer Javascript SDK

This is the JavaScript SDK for including the JayCut Mixer on your web
site. It is the recommended way to embed the JayCut video editor.

h2. Access

We recommend that you load the javascript from our servers specifying
only the major version number, like this:

* http://api.jaycut.com/assets/javascripts/sdk.0.4.js

These are actually aliases to the latest minor version of the
specified major. This makes sure you get the latest bugfixes but you
can rest assured that no backwards breaking functionality will be
introduced.

For complete info on all available versions, see the ChangeLog.

h2. Usage

The below is a simple case of implementing the editor.

<pre><code>
<html>
<head>
        <title>Our video editor</title>
</head>
<body>
<!-- This is where the editor will be inserted, you can place it anywhere you need it.  -->
<div id="jaycut-editor"></div>

<!-- Include the SDK, just before the closing </body> tag.-->

<script src="http://api.jaycut.com/assets/javascripts/sdk.0.4.js" type="text/javascript"></script>
<script type="text/javascript">

var site_name = "YOUR-SITENAME-HERE"
// Site name is something you manually picked when signing up for API access, you
// can find it in your welcome email along with your API secret.

var login_uri = 'YOUR-LOGIN-URL-HERE';
// login_uri is an url that you have to generate server side. There
// are plenty of tutorials on the developer section of Jaycut.com on
// how to generate a login_uri using your server side language of choice.


// The options hash can contain more but this is the bare minimum
var options = {
  'sitename': sitename,
  'login_uri': login_uri
}

JC.embed_mixer(options)


</script>
</body>
</html>

</code></pre>
h3. Options

Since version 0.4.1 the JC.init call takes a JSON object as the single and only
argument. This hash may contain all configuration data needed.

* @sitename@ - The name you picked when you signed up for the API.
* @login_uri@ - Required by the 'login' applet. The applet will
  perform a POST to this url. The idea is that the request will create
  an authenticated session in the users browser.
* @version@ - Set which version of the loaded applet to use. Default: 2
* @applet@ - Which applet to load. Default 'login'
* @chain@ - Which applet to chain load. Default 'mixer'. Set to false to disable chain loading.
* @embed_target@ - Id of the html tag that will be replaced with the embedded object. Default 'jaycut-editor'
* @embed_width@ - Width of the embedded flash object.
  Either absolute (e.g '800px')
  or relative ( e.g '100%'). Default '100%'
* @embed_height@ - Height of the embedded flash object.
* @chain_params@ - Parameters to the chain-loaded applet as a hash. Default '{}'
* @flash_params@ - Flash embedding parameters
** @wmode@ - Default 'window'
** @allowScriptAccess@ - Default 'always'
** @allowFullScreen@ - Default 'true'
** @bgcolor@ - Default '#000000'
* @app_uri@ - Legacy applicationUri flashVar. This is normally constructed from other options but can be overridden using this option.
* @loader_uri@ - Enables overriding of url to ApplicationLoader.swf, advanced usage only.
* @uri_authority@ - The hostname to use for all api calls. This is
  normally on the form {your sitename}.api.jaycut.com but may differ
  in some advanced use cases, notably CNAME aliasing.

Also, all the options configurable as flashVars according to the
reference documentation are available as options. The flashVars are in
camelCase format in this context they may also be written using
underscores, like the other options. Valid options include among
others:

* @noMicrophone@
* @no_webcam@
* @no_upload@
* @locale@
* @resetPreviewOnDelete@ 

Here's an example of a more customized embedding of the editor

<pre><code>
<html>
<head><title>Our video editor</title></head>
<body>
<!-- This is where the editor will be inserted, you can place it anywhere you need it.  -->
<div id="editor-goes-here"></div>

<!-- Include the SDK, just before the closing </body> tag.-->

<script src="http://api.jaycut.com/assets/javascripts/sdk.0.4.js" type="text/javascript"></script>
<script type="text/javascript">

var options = {
  'sitename': "cutedogsite",
  'login_uri': 'YOUR-LOGIN-URL-HERE',
  'version': 2,
  'no_microphone': true,
  'no_webcam': true,
  'embed_target': 'editor-goes-here',
  'resetPreviewOnDelete': false,
  'feeds': [ 'shared_videos', 'shared_images' ],
  'filter': { 'shared_videos': { 'category_id': '5' } },
  'flashparams': {
     'bgcolor': '#ffffff',
     'wmode': 'transparent'
  }
}

JC.embed_mixer(options)

</script>
</body>
</html>

</code></pre>


h3. Events

The editor triggers various events, that you can listen to via the JavaScript SDK.

<pre><code>
JC.subscribe('load_completed', function() {

        // event: load_completed
        // Fired when the editor itself has loaded (does not include media clips)
        // event data: none
        alert("Wow, the editor has loaded!");

});

JC.subscribe('mix_export_requested', function(data) {

        // event: mix_export_requested
        // Fired when a user has requested an export (i.e. clicked the publish/export button)
        // event_data: mix_id
        alert("An export has been requested of Mix with ID " + data.mix_id);
});

JC.subscribe('mix_export_created', function(data) {

        // event: mix_export_created
        // Fired when a user has created an export (i.e. completed the youtube exporter wizard, for instance)
        // event_data: export_id
        // NOTE: export_id is the ID of the export object, NOT the mix. Also note that
        // that the export has been created, not necessarily finished rendering. Also, keep in
        // mind that the mixer does other things after this event (such as publishing)
        // so you should be careful when using mix_export_created as a cue to navigate away from the mixer.
        // Consider using mix_published instead.
        alert("An export has been created, and it has ID " + data.export_id);
});

JC.subscribe('mix_published', function(data) {

        // event: mix_published
        // This is fired right after mix_export_created.
        // event_data: mix_id
        // NOTE: The mix has only been published, not necessarily finished rendering.
        alert("An export has been created, and it has ID " + data.mix_id);
});
JC.subscribe('add_media_source_selected', function(data) {

        // event: add_media_source_selected
        // This is fired when a user clicks the add media button and selects a media source (either by selecting in and clicking next, or double-clicking it)
        // event_data: media_source_id (string - can be either 'local', 'cam', 'mic' or the id of your Custom Media Source, if you have added one.
        alert('The user wants to add media via ' + data.media_source_id);
});
</script>
</body>
</html>

</code></pre>

h3. Methods

Methods that you can call on the JC object to alter the behaviour of the Mixer.

JC.leaveFullscreen()
If the editor is in fullscreen mode, force it to leave it. This is useful when you want to place layers over the editor, but that would be covered by the full screen mode.

h3. SWFObject from your own domain

You might have noticed that the JavaScript SDK includes SWFObject from ajax.googleapis.com,
and you might prefer to host swfobject from your own domain (because it reduces DNS lookups,
or just because it looks nice). To do this, simply host and load Swfobject yourself before you
load the JayCut Javascript SDK - if the SDK find that SWFobject is already loaded, it will use that,
and will not load the SWFObject from Google.
